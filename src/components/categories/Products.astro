---
import { slugify } from '../../utils/slugify';
import productsData from '../../products.json';

interface Product {
  productName: string;
  category: string;
  price: string;
  image: string;
}

interface Brand {
  name: string;
  count: number;
}

const products: Product[] = productsData.products;

// Dynamically generate brands and their counts
const brands: Brand[] = Array.from(
  products.reduce((map, product) => {
    map.set(product.category, (map.get(product.category) || 0) + 1);
    return map;
  }, new Map<string, number>())
).map(([name, count]) => ({ name, count }));
---

<div class="container mx-auto px-4 py-8">
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Sidebar Filter Section -->
    <aside 
      id="filter-sidebar" 
      class="w-full md:w-64 bg-white border border-gray-200 rounded-lg p-6 fixed md:relative inset-y-0 left-0 
        transform md:translate-x-0 transition-transform duration-300 ease-in-out z-50"
    >
      <div class="mb-6">
        <h2 class="text-lg font-bold text-gray-800 mb-4">Brands</h2>
        <div class="space-y-2">
          <button
            class="filter-button w-full text-left text-gray-700 hover:bg-gray-100 p-2 rounded cursor-pointer"
            data-filter="all"
          >
            All Brands
          </button>
          {brands.map((brand) => (
            <button
              class="filter-button w-full text-left text-gray-700 hover:bg-gray-100 p-2 rounded cursor-pointer"
              data-filter={brand.name}
            >
              {brand.name} <span class="text-gray-500 text-sm">({brand.count})</span>
            </button>
          ))}
        </div>
      </div>

      <div class="mb-6">
        <h2 class="text-lg font-bold text-gray-800 mb-4">Search</h2>
        <div class="flex flex-col">
          <input 
            id="search-input"
            type="text" 
            placeholder="Search products..." 
            class="mb-2 p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-200 text-black"
          />
          <button 
            id="search"
            class="bg-gray-100 text-black px-4 py-2 rounded hover:bg-gray-200 transition-colors"
          >
            Search
          </button>
        </div>
      </div>
    </aside>

    <!-- Main Product Section -->
    <main class="flex-1 ml-0 md:ml-[16rem]">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-800">
          {products.length} Products
        </h2>
        <select 
          class="p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-200"
        >
          <option>Sort by</option>
          <option value="price-asc">Price: Low to High</option>
          <option value="price-desc">Price: High to Low</option>
          <option value="newest">Newest Arrivals</option>
        </select>
      </div>

      <div 
        id="products-container" 
        class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6"
      >
        {products.map((product) => (
          <div 
            class="bg-white rounded-lg shadow-md overflow-hidden group item-card-wrapper flex flex-col justify-between" 
            data-category={product.category}
          >
            <a 
              href={`/product/${slugify(product.productName)}`} 
              class="block relative"
            >
              <div class="w-full h-64 overflow-hidden">
                <img 
                  src={product.image} 
                  alt={product.productName} 
                  class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110" 
                />
              </div>
              <div class="p-3 text-center">
                <h3 class="text-sm md:text-base font-semibold text-gray-800 mb-1 truncate product-title">
                  {product.productName}
                </h3>
                <p class="text-gray-600 font-medium">
                  ${parseFloat(product.price).toLocaleString('en-GB', { minimumFractionDigits: 2 })}
                </p>
              </div>
            </a>
          </div>
        ))}
      </div>
    </main>
  </div>
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const productsContainer = document.getElementById('products-container');
    const productCards = productsContainer.querySelectorAll('.item-card-wrapper');

    // Function to filter products by category
    function filterProducts(category) {
      productCards.forEach(card => {
        const productCategory = card.getAttribute('data-category');
        if (category === 'all' || productCategory === category) {
          card.style.display = 'flex'; 
        } else {
          card.style.display = 'none'; // Hide non-matching cards
        }
      });
    }

    // Filter by category on button click
    document.querySelectorAll('.filter-button').forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-filter');
        filterProducts(category);
      });
    });

    // Search functionality
    document.getElementById('search').addEventListener('click', () => {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      productCards.forEach(card => {
        const productName = card.querySelector('.product-title').textContent.toLowerCase();
        if (productName.includes(searchTerm)) {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
</script>
