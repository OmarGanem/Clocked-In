---
import productsData from '../../products.json';
import { slugify } from '../../utils/slugify';

const products = productsData.products;

// Dynamically generate brands and their counts
const brands = Array.from(
  products.reduce((map, product) => {
    map.set(product.category, (map.get(product.category) || 0) + 1);
    return map;
  }, new Map())
).map(([name, count]) => ({ name, count }));
---

<div class="bg-gray-900 min-h-screen">
  <div class="container mx-auto px-0 md:px-4 py-12"> <!-- Removed padding on smaller screens -->
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Sidebar -->
      <aside class="w-full md:w-72 bg-gray-800 rounded-lg p-8 md:ml-0"> <!-- Align sidebar to the left -->
        <div class="mb-8">
          <h2 class="text-lg font-semibold text-gray-200 mb-6 tracking-wide">Collections</h2>
          <div class="space-y-3">
            <button
              class="filter-button w-full text-left px-4 py-2 rounded transition-colors text-gray-400 hover:text-white hover:bg-gray-700"
              data-filter="all"
            >
              All Collections
            </button>
            {brands.map((brand) => (
              <button
                class="filter-button w-full text-left px-4 py-2 rounded transition-colors text-gray-400 hover:text-white hover:bg-gray-700"
                data-filter={brand.name}
              >
                {brand.name}
                <span class="text-gray-500 text-sm ml-2">({brand.count})</span>
              </button>
            ))}
          </div>
        </div>

        <div class="mb-8">
          <h2 class="text-lg font-semibold text-gray-200 mb-6 tracking-wide">Search</h2>
          <div class="space-y-4">
            <input
              id="search-input"
              type="text"
              placeholder="Search timepieces..."
              class="w-full bg-gray-700 text-white px-4 py-2 rounded border border-gray-600 focus:ring-2 focus:ring-gray-500 focus:border-transparent placeholder-gray-400"
            />
            <button
              id="search"
              class="w-full bg-gray-700 text-gray-200 px-4 py-2 rounded hover:bg-gray-600 transition-colors"
            >
              Search
            </button>
          </div>
        </div>
      </aside>

      <!-- Main Content -->
      <main class="flex-1">
        <div
          id="products-container"
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
          {products.map((product) => (
            <div
              class="bg-gray-800 rounded-lg overflow-hidden group item-card-wrapper"
              data-category={product.category}
            >
              <a href={`/product/${slugify(product.productName)}`} class="block">
                <div class="relative aspect-square overflow-hidden">
                  <img
                    src={product.image}
                    alt={product.productName}
                    class="w-full h-full object-cover transform transition-transform duration-700 group-hover:scale-110"
                  />
                  <!-- Overlay gradient -->
                  <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                </div>
                
                <div class="p-6 text-center">
                  <h3 class="text-lg font-semibold text-gray-200 mb-2 tracking-wider product-title">
                    {product.productName}
                  </h3>
                  <p class="text-gray-400 font-medium tracking-widest">
                    Â£{parseFloat(product.price).toLocaleString('en-GB', { 
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2 
                    })}
                  </p>
                </div>
              </a>
            </div>
          ))}
        </div>
      </main>
    </div>
  </div>
</div>


<script>
  // Client-side filtering functionality
  const filterButtons = document.querySelectorAll('.filter-button') as NodeListOf<HTMLButtonElement>;
  const productCards = document.querySelectorAll('.item-card-wrapper') as NodeListOf<HTMLElement>;
  const searchInput = document.getElementById('search-input') as HTMLInputElement | null;
  const searchButton = document.getElementById('search') as HTMLButtonElement | null;

  if (filterButtons && productCards) {
    // Filter functionality
    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');

        // Update active button styles
        filterButtons.forEach((btn) => {
          btn.classList.remove('bg-gray-700', 'text-white');
          btn.classList.add('text-gray-400');
        });
        button.classList.add('bg-gray-700', 'text-white');
        button.classList.remove('text-gray-400');

        // Filter products
        productCards.forEach((card) => {
          const productCategory = card.getAttribute('data-category');
          if (filter === 'all' || productCategory === filter) {
            card.style.display = 'block'; // Ensure 'card' is treated as HTMLElement
          } else {
            card.style.display = 'none';
          }
        });
      });
    });
  }

  if (searchInput && searchButton) {
    // Search functionality
    const handleSearch = () => {
      const searchTerm = searchInput.value.toLowerCase();

      productCards.forEach((card) => {
        const title = card.querySelector('.product-title')?.textContent?.toLowerCase() || '';
        if (title.includes(searchTerm)) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    };

    searchButton.addEventListener('click', handleSearch);
    searchInput.addEventListener('keyup', (e) => {
      if (e.key === 'Enter') handleSearch();
    });
  } else {
    console.error('Search input or button not found.');
  }
</script>

